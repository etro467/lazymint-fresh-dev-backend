rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // PRESERVE existing default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
    
    // PRESERVE existing users rules
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // PRESERVE existing campaigns rules (if any) and EXTEND
    match /campaigns/{campaignId} {
      // Public campaigns can be read by anyone
      allow read: if resource.data.isPublic == true && resource.data.status == 'active';
      
      // Campaign creators can read/write their own campaigns
      allow read, write: if request.auth != null && 
                         request.auth.uid == resource.data.creatorId;
      
      // Authenticated users can read campaigns they have access to
      allow read: if request.auth != null && 
                  (resource.data.isPublic == true || 
                   request.auth.uid == resource.data.creatorId);
      
      // Only authenticated users can create campaigns
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.creatorId &&
                    validateCampaignData(request.resource.data);
      
      // Only campaign creators can update their campaigns
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.creatorId &&
                    request.auth.uid == request.resource.data.creatorId &&
                    validateCampaignUpdate(request.resource.data, resource.data);
    }
    
    // Claims: Specific access patterns
    match /claims/{claimId} {
      // Anyone can create claims (for public claim submission)
      allow create: if validateClaimData(request.resource.data);
      
      // Claim owners (by email) and campaign creators can read claims
      allow read: if request.auth != null && 
                  (request.auth.token.email == resource.data.email ||
                   request.auth.uid == resource.data.creatorId);
      
      // Only the system can update claims (through Cloud Functions)
      // Users cannot directly update claim status
      allow update: if false;
      
      // Campaign creators can read their campaign claims
      allow list: if request.auth != null && 
              request.auth.uid == resource.data.creatorId;
    }
    
    // PRESERVE existing analytics rules (if any)
    match /analytics/{analyticsId} {
      allow read, write: if request.auth != null && 
                         request.auth.uid == resource.data.creatorId;
    }
  }
  
  // Helper functions for campaign validation
  function validateCampaignData(data) {
    return data.keys().hasAll(['creatorId', 'title', 'description', 'maxClaims', 'isPublic']) &&
           data.title is string && data.title.size() >= 3 && data.title.size() <= 100 &&
           data.description is string && data.description.size() >= 10 && data.description.size() <= 1000 &&
           data.maxClaims is int && data.maxClaims >= 1 && data.maxClaims <= 10000 &&
           data.isPublic is bool &&
           data.status in ['draft', 'active', 'paused', 'completed', 'archived'] &&
           data.currentClaims is int && data.currentClaims >= 0;
  }
  
  function validateCampaignUpdate(newData, oldData) {
    return newData.creatorId == oldData.creatorId &&
           newData.id == oldData.id &&
           newData.createdAt == oldData.createdAt;
  }
  
  // ADD helper function for claim validation
  function validateClaimData(data) {
    return data.keys().hasAll(['campaignId', 'email', 'status']) &&
           data.campaignId is string &&
           data.email is string &&
           data.email.matches('.*@.*\..*') &&
           data.status in ['pending', 'verified', 'completed', 'expired'] &&
           data.claimNumber is int && data.claimNumber > 0;
  }
}